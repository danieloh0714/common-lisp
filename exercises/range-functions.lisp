(defun map-range (fn start end)
  (loop with step = (if (< start end) 1 -1)
        for n = start then (+ n step)
        until (= n end)
        collect (funcall fn n)))

(defun every-range (fn start end)
  (loop with step = (if (< start end) 1 -1)
        for n = start then (+ n step)
        until (= n end)
        always (funcall fn n)))

(defun find-range (fn start end)
  (loop with step = (if (< start end) 1 -1)
        for n = start then (+ n step)
        until (= n end)
        when (funcall fn n)
        do (return n)))

(defun reduce-range (fn start end &optional (init nil))
  (loop with step = (if (< start end) 1 -1)
        for n = start then (+ n step)
        and res = init then (funcall fn res n)
        until (= n end)
        finally (return res)))
